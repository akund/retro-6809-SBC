;Interrupt service routines

;{ --------------------------------------------------- IRQs ---------------------------------------------------
IRQ            	ldx		IntVectIRQ			; load the new vector
				beq		_irq0
				jmp		,x					; execute the re-mapped isr
_irq0			ldx     #Rbuffer			; get buffer base addr				
				lda		RbHead				; head index value
				leax	a,x					; set X to the head pointer
				inca				
				cmpa	#RbSize
				blo		_irq1
				clra
_irq1		    cmpa	RbTail
				bne		_irq2				; stop filling before reaching the tail index
				lda		,s 					; modify the stacked CCR
				ora		#%00010000			; disable irq only when fifo full
				sta		,s
				inc 	RbDectCR 			; CR detect on, otherwise the fifo content will never be processed				
				bra		_irq3
_irq2			sta     RbHead
				lda		USB_COM_PORT
				cmpa	#CR					; CR compare
				bne		_irq22
				inc 	RbDectCR 			; CR found
_irq22			sta		,x					; store data to RB head pointer
_irq3			rti

FIRQ  			tst		IntVectFIRQ			; cmp the new vector stored
				bne		_firq
				tst		IntVectFIRQ+1		; cmp the new vector stored
				beq		_firq0
_firq			jmp		[IntVectFIRQ]		; execute the re-mapped isr
_firq0			rti

NMI            	ldx		IntVectNMI			; load the new vector stored @ $a00a
				beq		_nmi0
				jmp		,x					; execute the re-mapped isr
_nmi0			rti
;}

;{ --------------------------------------------------- SWI routines ------------------------------------------
SWI1_STR1		db		CR,"Debugging Mode: Program execution stopped. Enter a new breakpoint or quit",CR,0
SWI1_STR2		db		"PC, S, U, Y, X, DP, D, CC",CR,0
SWI1_STR3		db		", ",0

SWI1            ldx		IntVectSWI1			; load the new vector stored @ $a008
				beq		_swi10
				jmp		,x
_swi10          ldx		#SWI1_STR1 			; Breakpoint
				lbsr	sPUTSTR
				ldx		#SWI1_STR2
				lbsr	sPUTSTR
				ldd		10,s				; PC
				subd	#1					; step back the executed swi instruction
				std		10,s
				pshs	d
				lbsr	HEXWORD2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				tfr		s,d		
				addb	#12					;PS
				pshs	d
				lbsr	HEXWORD2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				ldd		8,s					;US
				pshs	d
				lbsr	HEXWORD2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				ldd		6,s					;Y
				pshs	d
				lbsr	HEXWORD2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				ldd		4,s					;X
				pshs	d
				lbsr	HEXWORD2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				ldb		3,s					;DPR
				pshs	d
				lbsr	HEXBYTE2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				ldd		2,s					;D
				pshs	d
				lbsr	HEXWORD2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR
				ldb		0,s					;CCR
				pshs	d
				lbsr	HEXBYTE2MONPORT
				leas	2,s
				ldx		#SWI1_STR3
				lbsr	sPUTSTR				
				
				lda		BrkPtInst
				sta		[BrkPtAddr]			; replace initial instruction at breakpoint addr	
				ldd		#BrkPtTriggered
				std		BrkPtAddr			; state to triggered

				andcc	#%11101111			; re-enable irq
_swi12			lbsr	sMonProcessCmd		; get next cmd: quit or new bp				
				ldd		BrkPtAddr		
				cmpd	#BrkPtTriggered		; wait until next command
				beq		_swi12
SWI3			
SWI2			rti
;}

;{ --------------------------------------------------- vector table ---------------------------------------------------
				org		ROM_Integrity
				dw		CheckSum16
				
				org    INT_VECTOR

				dw      SWI3
				dw 		SWI2
				dw      FIRQ
				dw      IRQ
				dw      SWI1
				dw      NMI
				dw      RESET
;}
				end

