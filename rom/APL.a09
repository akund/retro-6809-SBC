;-------------------------------------------------------------------------------------------------;
; APL interface routines
;-------------------------------------------------------------------------------------------------;

; APL status definitions
APL_RESET 			equ		'0'
APL_READY			equ		'1'
APL_BUSY			equ		'2'
APL_UNDEFINED		equ		'9'

BASIC_ORG			equ		CS0

					code
					org     MON_ORG
					
; interface to APL API for calls from BASIC
APLgetChar			lbra	getKeyboard					

APLsendChar			sta		USB_COM_PORT  		; forward to debug port				
					tfr  	a,b			  		; char in B
					pshs 	d			  		; charater as parameter (16-bit)
					lbsr  	sendCharToScreen          
					puls 	d,pc
					
APLcurBlinking		lbra	cursorBlinking
APLcurOff			lbra	cursorOff

APLclearscreen		pshs 	d
					lbsr	sendClearScreen
					puls 	d,pc

APLsound			pshs b						; save duration value (lower 8-bit)
					clrb
					pshs b						; save duration value (higer 8-bit)					
					pshs a						; save tone value (lower 8-bit)					
					pshs b						; save tone value (higer 8-bit)					
					lbsr	setTone
					leas 4,s					; free parameters
					rts

APLsetXY			pshs a						; save ver value (lower 8-bit)
					clra
					pshs a						; save ver value (higer 8-bit)					
					pshs d						; save hor value (16-bit)
					lbsr 	setpointXY			; character location (hor in 0,s; ver in 2,s)
					leas 4,s					; free parameters
					rts

;-------------------------------------------------------------------------------------------------;
; APL initialization
; param: 	none
; return:	none
;-------------------------------------------------------------------------------------------------;
APL_init			pshs	x					; save register(s)

					clr		BasicCallBack		; unused the next callback address
					clr		BasicCallBack+1
					
					ldd		BASIC_ORG			; read 2 first bytes BASIC ROM data
					cmpd	#$1A50				; ORCC instruction
					bne		_APL_init4

					; init APL output stream interpretation
					lda		#APL_UNDEFINED
					sta		APLstatus
					clr		KeyboardRbHead
					clr		KeyboardRbTail
					
					lbsr	UART_Init			; initialize the comunication with APL

					ldx		#$ffff				; timeout count
_APL_init0			leax	-1,x
					beq		_APL_init4
					lbsr	APL_OutputStream	; process the APL output stream
					cmpb	#APL_READY				
					bne		_APL_init0			; wait until ready
					
					ldx		#STR_BASIC
					lbsr	sPUTSTR	
					ldb		#BASIC_PROCESS_ID
					pshs	d
					lbsr	HEXBYTE2MONPORT
					ldb		#CR
					pshs	d
					lbsr	BYTE2MONPORT
					lbsr	BYTE2MONPORT
					leas	4,s					; clear the 2 pshs
										
					clrb
					lbsr	sendClearScreen
					
					ldx		#BOOT_SCR					
_APL_init1			ldb		,x+
					beq		_APL_init3 			; string ends with NULL
					clra
					pshs	d
					lbsr	sendCharToScreen
					leas	2,s
_APL_init2			lbsr	APL_OutputStream	; process the APL output stream
					cmpb	#APL_READY				
					bne		_APL_init2			; wait until ready					
					bra		_APL_init1					
_APL_init3			ldd		#BASIC_ORG			; init first time BASIC	
					std		BasicCallBack
_APL_init4			puls	x					; restore the register(s)
					rts
BOOT_SCR  			db		"Retro 6809 SBC",CR,"2014-2021 Adrian Kundert",CR,"https://github.com/akund",CR,CR,0
STR_BASIC      		db      "starting BASIC process ID ",0

;-------------------------------------------------------------------------------------------------;
; basic process
; param: 	none
; return:	APLstatus -> B
;-------------------------------------------------------------------------------------------------;
BASICprocess		bsr		APL_OutputStream	; process the APL output stream
					cmpb	#APL_READY				
					bne		_BASICprocess2		; skip BASIC when APL not ready
					
					pshs	d,u,cc				; save the registers					
					ldx  	BasicCallBack
					beq		_BASICprocess1		; skip the process execution when BasicCallBack is NULL
					sts		MonSavReg_S
					ldd  	#_BASICprocess0
					std  	BasicCallBack
					jmp		0,x
_BASICprocess0		lds		MonSavReg_S
_BASICprocess1		puls	d,u,cc				; restore the registers
_BASICprocess2		rts
					
;-------------------------------------------------------------------------------------------------;
; APL output stream process
; param: 	none
; return:	APLstatus -> B
;-------------------------------------------------------------------------------------------------;
APL_OutputStream	pshs	x					; save register(s)
					ldx		#1					; sAPLgetOutput param: 1 iteration only
					bsr		sAPLgetOutput		; get first protocol byte					
					tsta
					beq		_APL_OutputStream5										
					cmpb	#'U'				; Upload msg
					bne		_APL_OutputStream5
				
					ldx		#$ffff				; sAPLgetOutput param: max iterations
					bsr		sAPLgetOutput		; get second protocol byte
					tsta
					beq		_APL_OutputStream5
					cmpb	#'a'				; st'A'tus msg type
					bne		_APL_OutputStream2
					bsr		sAPLgetOutput		; get status value
					tsta
					beq		_APL_OutputStream5
					pshs	b					; save status value
					bsr		sAPLgetOutput		; CR
					tsta	
					beq		_APL_OutputStream1
					cmpb	#CR
					bne		_APL_OutputStream1
					puls	b					; restore status value
					stb		APLstatus
					bra		_APL_OutputStream5
_APL_OutputStream1 	leas	1,s					; free unrestored value
					bra		_APL_OutputStream5
					
_APL_OutputStream2	cmpb	#'k'				; 'K'eyboard msg type
					bne		_APL_OutputStream5
					
					bsr		sAPLgetOutput		; get msg length
					tsta
					beq		_APL_OutputStream5
					bsr		sAPLgetOutput		; get char value
					tsta
					beq		_APL_OutputStream5
					pshs	b					; save value
					bsr		sAPLgetOutput		; get CR
					tsta
					beq		_APL_OutputStream1
					cmpb	#CR
					bne		_APL_OutputStream1
					puls	b
					bsr		sAPL_KeyboardData
_APL_OutputStream5	clra
					ldb		APLstatus			; return the APL status					
					puls	x,pc				; restore the register(s) and return
					
;-------------------------------------------------------------------------------------------------;
; Get APL output stream with timeout
; param: 	X -> timeout iterations
; return:	char in -> B and A when != 0
;-------------------------------------------------------------------------------------------------;
sAPLgetOutput ;{					
_sAPLgetOutput1		lbsr	UartRead
					tsta
					bne		_sAPLgetOutput2
					leax	-1,x				; dec iteration counter
					bne		_sAPLgetOutput1
_sAPLgetOutput2		rts
;}
;-------------------------------------------------------------------------------------------------;
; Store APL keyboard data in the keyboard RB
; param: 	key value in -> B
; return:	none
;-------------------------------------------------------------------------------------------------;
sAPL_KeyboardData	pshs	x					; save register(s)
					ldx     #KeyboardRbuffer	; get buffer base addr				
					lda		KeyboardRbHead		; head index value
					leax	a,x					; set X to the head pointer
					inca				
					cmpa	#KeyboardRbSize
					blo		_APL_KeyboardData1
					clra
_APL_KeyboardData1  cmpa	KeyboardRbTail
					beq		_APL_KeyboardData2
					sta     KeyboardRbHead
					stb		,x					; store data to keyboard RB head pointer
_APL_KeyboardData2	puls	x					; restore the register(s)
					rts					

;-------------------------------------------------------------------------------------------------;
; Get keyboard char from ringbuffer (C call compatible)
; param: 	none
; return:	key value as char (or zero when no key was pressed) in -> D (unsigned int)
;-------------------------------------------------------------------------------------------------;
getKeyboard ;{
getKeybo			lbsr	isKeyboardData
					tstb
					beq		_getKeyboard2		; fifo empty when tail = head
					pshs	x
					ldx		#KeyboardRbuffer
					lda		KeyboardRbTail					
					ldb		a,x
					puls	x
					inca						; inc tail index
					cmpa	#KeyboardRbSize
					blo		_getKeyboard1
					clra						; wrap RbTail
_getKeyboard1		sta		KeyboardRbTail		; save updated tail index only once data extracted (critical section)
					clra
_getKeyboard2		rts

;-------------------------------------------------------------------------------------------------;
; isKeyboardData in the ringbuffer? (C call compatible)
; param: 	none
; return:	when no data, 0 -> D (unsigned int)
;-------------------------------------------------------------------------------------------------;
isKeyboardData ;{
isKeyboa			ldb		KeyboardRbHead
					subb	KeyboardRbTail
					clra
					rts
;}

;-------------------------------------------------------------------------------------------------;
; Send a char to the screen [Text mode] (C call compatible)
; param: 	2,s -> unused
;			3,s -> char to send
; return:	none
;-------------------------------------------------------------------------------------------------;					
sendCharToScreen ;{
					lbsr	waitSendDone
					lbsr	waitCTS
					ldb		#'D'				; sending
					stb		UART
					ldb		#'f'				; cmd
					stb		UART
					ldb		#'1'				; len
					stb		UART
					ldb		3,s
					stb 	UART  				; char
					ldb		#CR					; end
					stb		UART				
					rts
;}

;-------------------------------------------------------------------------------------------------;
; Set the screen cursor propriety [Text mode], (C call compatible)
; param: 	none
; return:	none
;-------------------------------------------------------------------------------------------------;					
cursorBlinking		lda		#'b'				; param 'b' for blinking
					bra		_sCursor1
cursorOff   		lda		#'0'				; param '0' for Off
_sCursor1			pshs	a
					lbsr	waitSendDone
					lbsr	waitCTS
					puls	a
					ldb		#'D'				; sending
					stb		UART
					ldb		#'c'				; cmd
					stb		UART
					sta 	UART  				; param
					ldb		#CR					; end
					stb		UART				
					rts
	
;-------------------------------------------------------------------------------------------------;
; Send the clear screen command (C call compatible)
; param: 	2,s -> unused
;			3,s -> color
; return:	none
;-------------------------------------------------------------------------------------------------;					
sendClearScreen ;{
					lbsr	waitSendDone
					lbsr	waitCTS
					ldb		#'D'				; sending
					stb		UART
					ldb		#'l'				; cmd
					stb		UART
					ldb		3,s
					addb	#'0'
					stb		UART				; color
					ldb		#CR					; end
					stb		UART				
					rts	
;}		
			
;-------------------------------------------------------------------------------------------------;
; Send the setpointXY command (C call compatible)
; param: 	2,s -> unused
;			3,s -> x
;			4,s -> unused
;			5,s -> y
; return:	none
;-------------------------------------------------------------------------------------------------;					
setpointXY ;{
setpoint			lbsr	waitSendDone
					lbsr	waitCTS
					ldb		#'D'				; sending
					stb		UART
					ldb		#'p'				; cmd
					stb		UART
					ldb		3,s
					addb	#'0'
					stb		UART				; x
					ldb		5,s
					addb	#'0'
					stb		UART				; y
					ldb		#CR					; end
					stb		UART				
					rts	
;}	

;-------------------------------------------------------------------------------------------------;
; Set tile index [Graph mode] (C call compatible)
; param: 	2,s -> unused
;			3,s -> tile index
; return:	none
;-------------------------------------------------------------------------------------------------;					
setTile ;{
					lbsr	waitSendDone
					lbsr	waitCTS
					ldb		#'D'				; sending
					stb		UART
					ldb		#'t'				; cmd
					stb		UART
					ldb		#'1'				; len
					stb		UART
					ldb		3,s
					stb 	UART  				; index
					ldb		#CR					; end
					stb		UART				
					rts
;}

;-------------------------------------------------------------------------------------------------;
; Send the tone command (C call compatible)
; param: 	2,s -> unused
;			3,s -> tone (8-bit)
;			4,s -> unused
;			5,s -> duration (8-bit)
; return:	none
;-------------------------------------------------------------------------------------------------;					
setTone ;{
					lbsr	waitSendDone
					lbsr	waitCTS
					ldb		#'D'				; sending
					stb		UART
					ldb		#'o'				; cmd
					stb		UART
					ldb		3,s
					stb		UART				; tone
					ldb		5,s
					stb		UART				; duration
					ldb		#CR					; end
					stb		UART				
					rts	
;}	

;-------------------------------------------------------------------------------------------------;
; Set sound index (C call compatible)
; param: 	2,s -> unused
;			3,s -> index
; return:	none
;-------------------------------------------------------------------------------------------------;					
setSound ;{
					lbsr	waitSendDone
					lbsr	waitCTS
					ldb		#'D'				; sending
					stb		UART
					ldb		#'s'				; cmd
					stb		UART
					ldb		3,s
					addb	#'0'				; container index
					stb		UART					
					ldb		#CR					; end
					stb		UART				
					rts
;}		

;-------------------------------------------------------------------------------------------------;
; Send container data [Graph mode] (C call compatible)
; param: 	2,s -> unused
;			3,s -> index
;			4-5,s -> pointer (16-bit) to max 32 bytes array "R0,G0,B0,R1,G1,B1,x,x" or sound
; return:	none
;-------------------------------------------------------------------------------------------------;					
sendContainerData ;{
sendCont			lbsr	waitSendDone
					lbsr	waitCTS
					pshs	x					; save used pointers (+2 bytes on stack)					
					ldb		#'D'				; sending
					stb		UART
					ldb		#'d'				; cmd
					stb		UART
					ldb		#32+'0'				; len 32 bytes
					stb		UART
					ldb		5,s					; 3,s +2 bytes
					addb	#'0'				; container index
					stb		UART
					ldx		6,s					; 4,s +2 bytes
					ldb		#32
_sendCtnData1		lda		,x+
					sta 	UART  				; data 1 to 32
					lbsr	waitSendDone		; check again when more than 16 byte fifo size					
					lbsr	waitCTS
					decb
					bne		_sendCtnData1					
					ldb		#CR					; end
					stb		UART				
					puls	x,pc				; restore the register(s) and return
	
;-------------------------------------------------------------------------------------------------;
; delay in ms (C call compatible)
; param: 	2-3,s -> delay value (16-bit)
; return:	none
;-------------------------------------------------------------------------------------------------;					
msDelay ;{
					ldd		#282		; 3 cycles
_msDelay0			subd	#1			; 4 cycles
					bne		_msDelay0	; 3 cycles
					ldd		2,s			; 5 cycles
					subd	#1			; 4 cycles
					std		2,s			; 5 cycles
					cmpd	#0			; 5 cycles
					bne		msDelay		; 3 cycles
					rts
										; 3 + (4+3 cycles * 282) + 5+4+5+5+3 = 2000 cycles/ms (intern clk 2MHz)

;}	