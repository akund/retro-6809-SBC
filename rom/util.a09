;{ --------------------------------------------------- Auxiliary Functions ------------------------------------
;----------------------------------------------------;
; write to EEPROM from RAM
; param: 			0,s -> return addr
;			4th arg:2,s -> protection 	-> 0,u
;			3rd arg:4,s -> len			-> 2,u
;			2nd arg:6,s -> dst 			-> 4,u
;			1st arg:8,s -> src 			-> 6,u
; return:	CheckSum16 value -> D
;----------------------------------------------------;
WriteEEP			pshs	u,y,x				; save used pointers (+6 bytes on stack)
					leau	8,s					; set 4th arg to 0,u (8 bytes totally)
										
					ldd		0,u					; get the protection param					
					cmpd	#0					; 1 is the XICOR protection
					beq		_WriteEEP1
					bsr		DISAXICORWP					
				
_WriteEEP1			ldy		4,u					;get the params (X = src, Y = dst)
					ldx		6,u	
					ldd		2,u					; get length value
					pshs	d					; create a length counter variable to preserve the arg
					
_WriteEEP2			lda		,x+
					cmpa	,y
					beq		_no_change
					sta		,y
					ldd		#3000 				; delay 10ms @ 1.5MHz -> 15000cycles / 6 
_WriteEEP3			subd	#1			
					bne		_WriteEEP3 			; eeprom 10 ms write delay loop					
_no_change			leay	1,y					; inc the pointer			
					ldd		0,s					; dec length counter variable
					subd	#1
					std		0,s
					bne		_WriteEEP2
					leas	2,s					; free the length counter
					
					ldd		0,u					; get the protection param
					cmpd	#0					; 1 is the XICOR protection
					beq		_WriteEEP5
					bsr		ENAXICORWP				
_WriteEEP5			puls	x,y,u,pc			; restore used registers

;----------------------------------------------------;
; asm call remove XICOR 28C64 eeprom write protection
; param:  none
; return: none
;----------------------------------------------------;				
DISAXICORWP			pshs	ccr,x				; save ccr (for the disabling)
					orcc	#%01010000			; disable interrupts				
					ldx 	#$1555+CS0  		;$1555 + base addr 
					lda		#$aa
					sta		,x
					ldx 	#$0aaa+CS0
					lda		#$55
					sta		,x
					ldx 	#$1555+CS0
					lda		#$80
					sta		,x
					ldx 	#$1555+CS0
					lda		#$aa
					sta		,x
					ldx 	#$0aaa+CS0
					lda		#$55
					sta		,x
					ldx 	#$1555+CS0
					lda		#$20
					sta		,x				
					puls	x,ccr,pc				; restore registers
				
;----------------------------------------------------;
; asm call enable XICOR 28C64 eeprom write protection by re-write a byte
; param:  none
; return: none
;----------------------------------------------------;				
ENAXICORWP			pshs	ccr,x				; save ccr (for the disabling)
					orcc	#%01010000			; disable interrupts				
					ldb		CS0					; get the byte
					ldx 	#$1555+CS0  		;$1555 + base addr 
					lda		#$aa
					sta		,x
					ldx 	#$0aaa+CS0
					lda		#$55
					sta		,x
					ldx 	#$1555+CS0
					lda		#$a0
					sta		,x
					; write the byte
					ldx 	#CS0				; get the byte addr
					stb		,x
					ldd		#3000 				; delay 10ms @ 1.5MHz -> 15000cycles / 6 
_ENAX_1				subd	#1				
					bne		_ENAX_1 			; eeprom 1 ms write delay loop
					puls	x,ccr,pc			; restore registers

;----------------------------------------------------;
; asm call ROM integrity check
; param:  X -> CheckSum16 begin addr
; return: none
;----------------------------------------------------;
ROMcheckSTR0		db		"ROM verified",0
ROMcheckSTR1		db		13,"CheckSum16 ",0
ROMcheckSTR2		db		" was calculated instead ",0
ROMcheckSTR3		db		", ROM failure!",0
sROMcheck			pshs	x					; push as 1st arg
					clra						; set CheckSum16 ROM's end wrapped to addr 0
					clrb
					pshs	d					; push as 2nd arg
					subd	ROM_Integrity		; initial CheckSum16 is excluded by negative value
					pshs	d					; push as 3rd arg			
					lbsr	getCheckSum16
					leas	6,s					; free the 3 args
					cmpd	ROM_Integrity
					beq		_sROMok
					pshs	d					; param for HEXWORD2MONPORT							
					ldx		#ROMcheckSTR1
					lbsr	sPUTSTR
					lbsr	HEXWORD2MONPORT	
					leas	2,s					; free the last push
					ldx		#ROMcheckSTR2
					lbsr	sPUTSTR
					ldd		ROM_Integrity
					pshs	d					; param for HEXWORD2MONPORT							
					lbsr	HEXWORD2MONPORT
					leas	2,s					; free the last push					
					ldx		#ROMcheckSTR3		; failure
					lbsr	sPUTSTR
					bra		sROMcheckdone		; to be removed		
_sROMerror			bra		_sROMerror
_sROMok				ldx		#ROMcheckSTR0		; success
					lbsr	sPUTSTR			
sROMcheckdone		rts

;----------------------------------------------------;
; calculate the 16-bit CheckSum of the ROM
; param: 			0,s -> return addr
;			3rd arg:2,s -> CS16InitialValue -> 0,u
;			2nd arg:4,s -> CS16EndAddr		-> 2,u
;			1st arg 6,s -> start addr 		-> 4,u
; return:	CheckSum16 value -> D
;----------------------------------------------------;
getCheckSum16	;{	
					pshs	u,x					; save used registers (+4 bytes on stack)
					leau	6,s					; set arg1 to 0,u (4 bytes after the args)
					ldx		4,u					; get 3rd arg start addr
_getCheckSum160		ldd		,x++
					addd	0,u  				; 16-bit checksum
					std		0,u
					cmpx	2,u 				; end
					bne		_getCheckSum160
					puls	x,u,pc				; restore used registers
;}

;----------------------------------------------------;
; asm call calculate the string length
; param: 	X -> pointer
; return:	length -> D
;----------------------------------------------------;
sStrlen  ;{
					clrb
_sstrlen1 			lda		,x+
					beq		_sstrlenDone 		; string ends with NULL
					incb
					bra		_sstrlen1
					clra
_sstrlenDone		rts
;}

;----------------------------------------------------;
; asm call shift left D 4-bit
; param: 	D -> value
; return:	out -> D
;----------------------------------------------------;
sWLSL4bit	       	lslb
					rola
					lslb
					rola
					lslb
					rola
					lslb
					rola
					rts

;----------------------------------------------------;
; send string on debug port
; param: 	2,s -> string pointer
; return:	none
;----------------------------------------------------;
PUTSTR	         	pshs	x				; +2 bytes on stack
					ldx		4,s
_putstr0			ldb		,x+
					beq		_putstr1 		; string ends with NULL
					lbsr	sMON_PORT_WR
					bra		_putstr0
_putstr1			puls	x,pc

;----------------------------------------------------;
; send Word on debug port, displayed in HEX
; param: 	2,s -> 8-bit high byte
;			3,s -> 8-bit low byte
; return:	none, D is not preserved
;----------------------------------------------------;
HEXWORD2MONPORT		
HEXWORD2			pshs	u					; +2 bytes on stack
					leau	4,s					; fix arg1 pointer to 0,u	
					ldb		#'$'
					lbsr	sMON_PORT_WR
					ldb		0,u		  			; param high byte
					pshs	d
					lbsr	DHEX2TEXT
					leas	2,s 
					pshs	b					; save low byte
					tfr		a,b
					lbsr	sMON_PORT_WR		; write high byte
					puls	b					; get low byte
					lbsr	sMON_PORT_WR		; write low byte
					ldb		1,u		  			; param low byte
					pshs	d
					lbsr	DHEX2TEXT
					leas	2,s 
					pshs	b					; save low byte
					tfr		a,b
					lbsr	sMON_PORT_WR		; write high byte
					puls	b					; get low byte
					lbsr	sMON_PORT_WR		; write low byte
					puls	u,pc
;}

;----------------------------------------------------;
; send Byte on debug port, displayed in HEX
; param: 	2,s -> xx
;			3,s -> 8-bit value
; return:	none, D is not preserved
;----------------------------------------------------;
HEXBYTE2MONPORT
HEXBYTE2			pshs	u
					leau	4,s					; fix arg1 pointer to 0,u		
					ldb		#'$'
					lbsr	sMON_PORT_WR
					ldb		1,u
					pshs	d
					lbsr	DHEX2TEXT
					leas	2,s 
					pshs	b
					tfr		a,b
					lbsr	sMON_PORT_WR			; write high nibble
					puls	b
					lbsr	sMON_PORT_WR			; write low nibble
					puls	u,pc

;----------------------------------------------------;
; send a byte on debug port
; param: 	2,s -> xx
;			3,s -> 8-bit value
; return:	none
;----------------------------------------------------;
BYTE2MONPORT
BYTE2MON			ldb		3,s
					lbsr	sMON_PORT_WR
					rts

;----------------------------------------------------;
; convert a byte to ascii hex value
; param: 	2,s -> xx
;			3,s -> 8-bit value
; return:	high nible -> A
;			low nibble -> B
;----------------------------------------------------;
DHEX2TEXT	   		lda		3,s
					lsra
					lsra
					lsra
					lsra
					bsr		sHEX2TEXT
					tfr		a,b
					lda		3,s
					anda	#$f					;lower nible
					bsr		sHEX2TEXT
					exg		a,b
					rts

;----------------------------------------------------;
; asm call hex to dec conversion
; param: 	A -> hex value
; return:	dec out -> A
;----------------------------------------------------;
sHEX2TEXT			anda	#$f					;lower nible
					cmpa	#9
					bhi     sHEX2TEXT_1
					adda	#'0'				;for number
					bra     sHEX2TEXT_2
sHEX2TEXT_1	    	adda	#$37				;for letter
sHEX2TEXT_2			rts

;----------------------------------------------------;
; asm call dec to hex conversion
; param: 	A -> dec value
; return:	hex out -> A
;----------------------------------------------------;
sTEXT2HEX			cmpa	#'9'
					bhi     sTEXT2HEX_1
					anda	#$f					;for number
					bra     sTEXT2HEX_2
sTEXT2HEX_1      	cmpa	#'F'
					bhi     sTEXT2HEX_11
					suba	#$37				;for higher case letter
					bra     sTEXT2HEX_2
sTEXT2HEX_11     	suba	#$57				;for lower case letter
sTEXT2HEX_2			rts
